{"ast":null,"code":"var error = require('./utils/error');\nvar jStat = require('jstat');\nvar text = require('./text');\nvar utils = require('./utils/common');\nvar bessel = require('bessel');\nfunction isValidBinaryNumber(number) {\n  return /^[01]{1,10}$/.test(number);\n}\nexports.BESSELI = function (x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n  return bessel.besseli(x, n);\n};\nexports.BESSELJ = function (x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n  return bessel.besselj(x, n);\n};\nexports.BESSELK = function (x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n  return bessel.besselk(x, n);\n};\nexports.BESSELY = function (x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n  return bessel.bessely(x, n);\n};\nexports.BIN2DEC = function (number) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Convert binary number to decimal\n  var result = parseInt(number, 2);\n\n  // Handle negative numbers\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return parseInt(stringified.substring(1), 2) - 512;\n  } else {\n    return result;\n  }\n};\nexports.BIN2HEX = function (number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);\n  }\n\n  // Convert binary number to hexadecimal\n  var result = parseInt(number, 2).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.BIN2OCT = function (number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);\n  }\n\n  // Convert binary number to octal\n  var result = parseInt(number, 2).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.BITAND = function (number1, number2) {\n  // Return error if either number is a non-numeric value\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise AND of two numbers\n  return number1 & number2;\n};\nexports.BITLSHIFT = function (number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the left or to the right if shift is negative\n  return shift >= 0 ? number << shift : number >> -shift;\n};\nexports.BITOR = function (number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise OR of two numbers\n  return number1 | number2;\n};\nexports.BITRSHIFT = function (number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the right or to the left if shift is negative\n  return shift >= 0 ? number >> shift : number << -shift;\n};\nexports.BITXOR = function (number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise XOR of two numbers\n  return number1 ^ number2;\n};\nexports.COMPLEX = function (real, imaginary, suffix) {\n  real = utils.parseNumber(real);\n  imaginary = utils.parseNumber(imaginary);\n  if (utils.anyIsError(real, imaginary)) {\n    return real;\n  }\n\n  // Set suffix\n  suffix = suffix === undefined ? 'i' : suffix;\n\n  // Return error if suffix is neither \"i\" nor \"j\"\n  if (suffix !== 'i' && suffix !== 'j') {\n    return error.value;\n  }\n\n  // Return complex number\n  if (real === 0 && imaginary === 0) {\n    return 0;\n  } else if (real === 0) {\n    return imaginary === 1 ? suffix : imaginary.toString() + suffix;\n  } else if (imaginary === 0) {\n    return real.toString();\n  } else {\n    var sign = imaginary > 0 ? '+' : '';\n    return real.toString() + sign + (imaginary === 1 ? suffix : imaginary.toString() + suffix);\n  }\n};\nexports.CONVERT = function (number, from_unit, to_unit) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // List of units supported by CONVERT and units defined by the International System of Units\n  // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion ratio]\n  var units = [[\"a.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34], [\"a.u. of charge\", \"e\", null, \"electric_charge\", false, false, 1.60217653141414e-19], [\"a.u. of energy\", \"Eh\", null, \"energy\", false, false, 4.35974417757576e-18], [\"a.u. of length\", \"a?\", null, \"length\", false, false, 5.29177210818182e-11], [\"a.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31], [\"a.u. of time\", \"?/Eh\", null, \"time\", false, false, 2.41888432650516e-17], [\"admiralty knot\", \"admkn\", null, \"speed\", false, true, 0.514773333], [\"ampere\", \"A\", null, \"electric_current\", true, false, 1], [\"ampere per meter\", \"A/m\", null, \"magnetic_field_intensity\", true, false, 1], [\"ångström\", \"Å\", [\"ang\"], \"length\", false, true, 1e-10], [\"are\", \"ar\", null, \"area\", false, true, 100], [\"astronomical unit\", \"ua\", null, \"length\", false, false, 1.49597870691667e-11], [\"bar\", \"bar\", null, \"pressure\", false, false, 100000], [\"barn\", \"b\", null, \"area\", false, false, 1e-28], [\"becquerel\", \"Bq\", null, \"radioactivity\", true, false, 1], [\"bit\", \"bit\", [\"b\"], \"information\", false, true, 1], [\"btu\", \"BTU\", [\"btu\"], \"energy\", false, true, 1055.05585262], [\"byte\", \"byte\", null, \"information\", false, true, 8], [\"candela\", \"cd\", null, \"luminous_intensity\", true, false, 1], [\"candela per square metre\", \"cd/m?\", null, \"luminance\", true, false, 1], [\"coulomb\", \"C\", null, \"electric_charge\", true, false, 1], [\"cubic ångström\", \"ang3\", [\"ang^3\"], \"volume\", false, true, 1e-30], [\"cubic foot\", \"ft3\", [\"ft^3\"], \"volume\", false, true, 0.028316846592], [\"cubic inch\", \"in3\", [\"in^3\"], \"volume\", false, true, 0.000016387064], [\"cubic light-year\", \"ly3\", [\"ly^3\"], \"volume\", false, true, 8.46786664623715e-47], [\"cubic metre\", \"m?\", null, \"volume\", true, true, 1], [\"cubic mile\", \"mi3\", [\"mi^3\"], \"volume\", false, true, 4168181825.44058], [\"cubic nautical mile\", \"Nmi3\", [\"Nmi^3\"], \"volume\", false, true, 6352182208], [\"cubic Pica\", \"Pica3\", [\"Picapt3\", \"Pica^3\", \"Picapt^3\"], \"volume\", false, true, 7.58660370370369e-8], [\"cubic yard\", \"yd3\", [\"yd^3\"], \"volume\", false, true, 0.764554857984], [\"cup\", \"cup\", null, \"volume\", false, true, 0.0002365882365], [\"dalton\", \"Da\", [\"u\"], \"mass\", false, false, 1.66053886282828e-27], [\"day\", \"d\", [\"day\"], \"time\", false, true, 86400], [\"degree\", \"°\", null, \"angle\", false, false, 0.0174532925199433], [\"degrees Rankine\", \"Rank\", null, \"temperature\", false, true, 0.555555555555556], [\"dyne\", \"dyn\", [\"dy\"], \"force\", false, true, 0.00001], [\"electronvolt\", \"eV\", [\"ev\"], \"energy\", false, true, 1.60217656514141], [\"ell\", \"ell\", null, \"length\", false, true, 1.143], [\"erg\", \"erg\", [\"e\"], \"energy\", false, true, 1e-7], [\"farad\", \"F\", null, \"electric_capacitance\", true, false, 1], [\"fluid ounce\", \"oz\", null, \"volume\", false, true, 0.0000295735295625], [\"foot\", \"ft\", null, \"length\", false, true, 0.3048], [\"foot-pound\", \"flb\", null, \"energy\", false, true, 1.3558179483314], [\"gal\", \"Gal\", null, \"acceleration\", false, false, 0.01], [\"gallon\", \"gal\", null, \"volume\", false, true, 0.003785411784], [\"gauss\", \"G\", [\"ga\"], \"magnetic_flux_density\", false, true, 1], [\"grain\", \"grain\", null, \"mass\", false, true, 0.0000647989], [\"gram\", \"g\", null, \"mass\", false, true, 0.001], [\"gray\", \"Gy\", null, \"absorbed_dose\", true, false, 1], [\"gross registered ton\", \"GRT\", [\"regton\"], \"volume\", false, true, 2.8316846592], [\"hectare\", \"ha\", null, \"area\", false, true, 10000], [\"henry\", \"H\", null, \"inductance\", true, false, 1], [\"hertz\", \"Hz\", null, \"frequency\", true, false, 1], [\"horsepower\", \"HP\", [\"h\"], \"power\", false, true, 745.69987158227], [\"horsepower-hour\", \"HPh\", [\"hh\", \"hph\"], \"energy\", false, true, 2684519.538], [\"hour\", \"h\", [\"hr\"], \"time\", false, true, 3600], [\"imperial gallon (U.K.)\", \"uk_gal\", null, \"volume\", false, true, 0.00454609], [\"imperial hundredweight\", \"lcwt\", [\"uk_cwt\", \"hweight\"], \"mass\", false, true, 50.802345], [\"imperial quart (U.K)\", \"uk_qt\", null, \"volume\", false, true, 0.0011365225], [\"imperial ton\", \"brton\", [\"uk_ton\", \"LTON\"], \"mass\", false, true, 1016.046909], [\"inch\", \"in\", null, \"length\", false, true, 0.0254], [\"international acre\", \"uk_acre\", null, \"area\", false, true, 4046.8564224], [\"IT calorie\", \"cal\", null, \"energy\", false, true, 4.1868], [\"joule\", \"J\", null, \"energy\", true, true, 1], [\"katal\", \"kat\", null, \"catalytic_activity\", true, false, 1], [\"kelvin\", \"K\", [\"kel\"], \"temperature\", true, true, 1], [\"kilogram\", \"kg\", null, \"mass\", true, true, 1], [\"knot\", \"kn\", null, \"speed\", false, true, 0.514444444444444], [\"light-year\", \"ly\", null, \"length\", false, true, 9460730472580800], [\"litre\", \"L\", [\"l\", \"lt\"], \"volume\", false, true, 0.001], [\"lumen\", \"lm\", null, \"luminous_flux\", true, false, 1], [\"lux\", \"lx\", null, \"illuminance\", true, false, 1], [\"maxwell\", \"Mx\", null, \"magnetic_flux\", false, false, 1e-18], [\"measurement ton\", \"MTON\", null, \"volume\", false, true, 1.13267386368], [\"meter per hour\", \"m/h\", [\"m/hr\"], \"speed\", false, true, 0.00027777777777778], [\"meter per second\", \"m/s\", [\"m/sec\"], \"speed\", true, true, 1], [\"meter per second squared\", \"m?s??\", null, \"acceleration\", true, false, 1], [\"parsec\", \"pc\", [\"parsec\"], \"length\", false, true, 30856775814671900], [\"meter squared per second\", \"m?/s\", null, \"kinematic_viscosity\", true, false, 1], [\"metre\", \"m\", null, \"length\", true, true, 1], [\"miles per hour\", \"mph\", null, \"speed\", false, true, 0.44704], [\"millimetre of mercury\", \"mmHg\", null, \"pressure\", false, false, 133.322], [\"minute\", \"?\", null, \"angle\", false, false, 0.000290888208665722], [\"minute\", \"min\", [\"mn\"], \"time\", false, true, 60], [\"modern teaspoon\", \"tspm\", null, \"volume\", false, true, 0.000005], [\"mole\", \"mol\", null, \"amount_of_substance\", true, false, 1], [\"morgen\", \"Morgen\", null, \"area\", false, true, 2500], [\"n.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34], [\"n.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31], [\"n.u. of speed\", \"c?\", null, \"speed\", false, false, 299792458], [\"n.u. of time\", \"?/(me?c??)\", null, \"time\", false, false, 1.28808866778687e-21], [\"nautical mile\", \"M\", [\"Nmi\"], \"length\", false, true, 1852], [\"newton\", \"N\", null, \"force\", true, true, 1], [\"œrsted\", \"Oe \", null, \"magnetic_field_intensity\", false, false, 79.5774715459477], [\"ohm\", \"Ω\", null, \"electric_resistance\", true, false, 1], [\"ounce mass\", \"ozm\", null, \"mass\", false, true, 0.028349523125], [\"pascal\", \"Pa\", null, \"pressure\", true, false, 1], [\"pascal second\", \"Pa?s\", null, \"dynamic_viscosity\", true, false, 1], [\"pferdestärke\", \"PS\", null, \"power\", false, true, 735.49875], [\"phot\", \"ph\", null, \"illuminance\", false, false, 0.0001], [\"pica (1/6 inch)\", \"pica\", null, \"length\", false, true, 0.00035277777777778], [\"pica (1/72 inch)\", \"Pica\", [\"Picapt\"], \"length\", false, true, 0.00423333333333333], [\"poise\", \"P\", null, \"dynamic_viscosity\", false, false, 0.1], [\"pond\", \"pond\", null, \"force\", false, true, 0.00980665], [\"pound force\", \"lbf\", null, \"force\", false, true, 4.4482216152605], [\"pound mass\", \"lbm\", null, \"mass\", false, true, 0.45359237], [\"quart\", \"qt\", null, \"volume\", false, true, 0.000946352946], [\"radian\", \"rad\", null, \"angle\", true, false, 1], [\"second\", \"?\", null, \"angle\", false, false, 0.00000484813681109536], [\"second\", \"s\", [\"sec\"], \"time\", true, true, 1], [\"short hundredweight\", \"cwt\", [\"shweight\"], \"mass\", false, true, 45.359237], [\"siemens\", \"S\", null, \"electrical_conductance\", true, false, 1], [\"sievert\", \"Sv\", null, \"equivalent_dose\", true, false, 1], [\"slug\", \"sg\", null, \"mass\", false, true, 14.59390294], [\"square ångström\", \"ang2\", [\"ang^2\"], \"area\", false, true, 1e-20], [\"square foot\", \"ft2\", [\"ft^2\"], \"area\", false, true, 0.09290304], [\"square inch\", \"in2\", [\"in^2\"], \"area\", false, true, 0.00064516], [\"square light-year\", \"ly2\", [\"ly^2\"], \"area\", false, true, 8.95054210748189e+31], [\"square meter\", \"m?\", null, \"area\", true, true, 1], [\"square mile\", \"mi2\", [\"mi^2\"], \"area\", false, true, 2589988.110336], [\"square nautical mile\", \"Nmi2\", [\"Nmi^2\"], \"area\", false, true, 3429904], [\"square Pica\", \"Pica2\", [\"Picapt2\", \"Pica^2\", \"Picapt^2\"], \"area\", false, true, 0.00001792111111111], [\"square yard\", \"yd2\", [\"yd^2\"], \"area\", false, true, 0.83612736], [\"statute mile\", \"mi\", null, \"length\", false, true, 1609.344], [\"steradian\", \"sr\", null, \"solid_angle\", true, false, 1], [\"stilb\", \"sb\", null, \"luminance\", false, false, 0.0001], [\"stokes\", \"St\", null, \"kinematic_viscosity\", false, false, 0.0001], [\"stone\", \"stone\", null, \"mass\", false, true, 6.35029318], [\"tablespoon\", \"tbs\", null, \"volume\", false, true, 0.0000147868], [\"teaspoon\", \"tsp\", null, \"volume\", false, true, 0.00000492892], [\"tesla\", \"T\", null, \"magnetic_flux_density\", true, true, 1], [\"thermodynamic calorie\", \"c\", null, \"energy\", false, true, 4.184], [\"ton\", \"ton\", null, \"mass\", false, true, 907.18474], [\"tonne\", \"t\", null, \"mass\", false, false, 1000], [\"U.K. pint\", \"uk_pt\", null, \"volume\", false, true, 0.00056826125], [\"U.S. bushel\", \"bushel\", null, \"volume\", false, true, 0.03523907], [\"U.S. oil barrel\", \"barrel\", null, \"volume\", false, true, 0.158987295], [\"U.S. pint\", \"pt\", [\"us_pt\"], \"volume\", false, true, 0.000473176473], [\"U.S. survey mile\", \"survey_mi\", null, \"length\", false, true, 1609.347219], [\"U.S. survey/statute acre\", \"us_acre\", null, \"area\", false, true, 4046.87261], [\"volt\", \"V\", null, \"voltage\", true, false, 1], [\"watt\", \"W\", null, \"power\", true, true, 1], [\"watt-hour\", \"Wh\", [\"wh\"], \"energy\", false, true, 3600], [\"weber\", \"Wb\", null, \"magnetic_flux\", true, false, 1], [\"yard\", \"yd\", null, \"length\", false, true, 0.9144], [\"year\", \"yr\", null, \"time\", false, true, 31557600]];\n\n  // Binary prefixes\n  // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived from]\n  var binary_prefixes = {\n    Yi: [\"yobi\", 80, 1208925819614629174706176, \"Yi\", \"yotta\"],\n    Zi: [\"zebi\", 70, 1180591620717411303424, \"Zi\", \"zetta\"],\n    Ei: [\"exbi\", 60, 1152921504606846976, \"Ei\", \"exa\"],\n    Pi: [\"pebi\", 50, 1125899906842624, \"Pi\", \"peta\"],\n    Ti: [\"tebi\", 40, 1099511627776, \"Ti\", \"tera\"],\n    Gi: [\"gibi\", 30, 1073741824, \"Gi\", \"giga\"],\n    Mi: [\"mebi\", 20, 1048576, \"Mi\", \"mega\"],\n    ki: [\"kibi\", 10, 1024, \"ki\", \"kilo\"]\n  };\n\n  // Unit prefixes\n  // [Name, Multiplier, Abbreviation]\n  var unit_prefixes = {\n    Y: [\"yotta\", 1e+24, \"Y\"],\n    Z: [\"zetta\", 1e+21, \"Z\"],\n    E: [\"exa\", 1e+18, \"E\"],\n    P: [\"peta\", 1e+15, \"P\"],\n    T: [\"tera\", 1e+12, \"T\"],\n    G: [\"giga\", 1e+09, \"G\"],\n    M: [\"mega\", 1e+06, \"M\"],\n    k: [\"kilo\", 1e+03, \"k\"],\n    h: [\"hecto\", 1e+02, \"h\"],\n    e: [\"dekao\", 1e+01, \"e\"],\n    d: [\"deci\", 1e-01, \"d\"],\n    c: [\"centi\", 1e-02, \"c\"],\n    m: [\"milli\", 1e-03, \"m\"],\n    u: [\"micro\", 1e-06, \"u\"],\n    n: [\"nano\", 1e-09, \"n\"],\n    p: [\"pico\", 1e-12, \"p\"],\n    f: [\"femto\", 1e-15, \"f\"],\n    a: [\"atto\", 1e-18, \"a\"],\n    z: [\"zepto\", 1e-21, \"z\"],\n    y: [\"yocto\", 1e-24, \"y\"]\n  };\n\n  // Initialize units and multipliers\n  var from = null;\n  var to = null;\n  var base_from_unit = from_unit;\n  var base_to_unit = to_unit;\n  var from_multiplier = 1;\n  var to_multiplier = 1;\n  var alt;\n\n  // Lookup from and to units\n  for (var i = 0; i < units.length; i++) {\n    alt = units[i][2] === null ? [] : units[i][2];\n    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n      from = units[i];\n    }\n    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n      to = units[i];\n    }\n  }\n\n  // Lookup from prefix\n  if (from === null) {\n    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];\n    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (from_unit.substring(0, 2) === 'da') {\n      from_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (from_binary_prefix) {\n      from_multiplier = from_binary_prefix[2];\n      base_from_unit = from_unit.substring(2);\n    } else if (from_unit_prefix) {\n      from_multiplier = from_unit_prefix[1];\n      base_from_unit = from_unit.substring(from_unit_prefix[2].length);\n    }\n\n    // Lookup from unit\n    for (var j = 0; j < units.length; j++) {\n      alt = units[j][2] === null ? [] : units[j][2];\n      if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n        from = units[j];\n      }\n    }\n  }\n\n  // Lookup to prefix\n  if (to === null) {\n    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];\n    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (to_unit.substring(0, 2) === 'da') {\n      to_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (to_binary_prefix) {\n      to_multiplier = to_binary_prefix[2];\n      base_to_unit = to_unit.substring(2);\n    } else if (to_unit_prefix) {\n      to_multiplier = to_unit_prefix[1];\n      base_to_unit = to_unit.substring(to_unit_prefix[2].length);\n    }\n\n    // Lookup to unit\n    for (var k = 0; k < units.length; k++) {\n      alt = units[k][2] === null ? [] : units[k][2];\n      if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n        to = units[k];\n      }\n    }\n  }\n\n  // Return error if a unit does not exist\n  if (from === null || to === null) {\n    return error.na;\n  }\n\n  // Return error if units represent different quantities\n  if (from[3] !== to[3]) {\n    return error.na;\n  }\n\n  // Return converted number\n  return number * from[6] * from_multiplier / (to[6] * to_multiplier);\n};\nexports.DEC2BIN = function (number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -512, or is greater than 511\n  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (number < 0) {\n    return '1' + text.REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = parseInt(number, 10).toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.DEC2HEX = function (number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  if (number < 0) {\n    return (1099511627776 + number).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = parseInt(number, 10).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.DEC2OCT = function (number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (number < 0) {\n    return (1073741824 + number).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = parseInt(number, 10).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.DELTA = function (number1, number2) {\n  // Set number2 to zero if undefined\n  number2 = number2 === undefined ? 0 : number2;\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return delta\n  return number1 === number2 ? 1 : 0;\n};\n\n// TODO: why is upper_bound not used ? The excel documentation has no examples with upper_bound\nexports.ERF = function (lower_bound, upper_bound) {\n  // Set number2 to zero if undefined\n  upper_bound = upper_bound === undefined ? 0 : upper_bound;\n  lower_bound = utils.parseNumber(lower_bound);\n  upper_bound = utils.parseNumber(upper_bound);\n  if (utils.anyIsError(lower_bound, upper_bound)) {\n    return error.value;\n  }\n  return jStat.erf(lower_bound);\n};\n\n// TODO\nexports.ERF.PRECISE = function () {\n  throw new Error('ERF.PRECISE is not implemented');\n};\nexports.ERFC = function (x) {\n  // Return error if x is not a number\n  if (isNaN(x)) {\n    return error.value;\n  }\n  return jStat.erfc(x);\n};\n\n// TODO\nexports.ERFC.PRECISE = function () {\n  throw new Error('ERFC.PRECISE is not implemented');\n};\nexports.GESTEP = function (number, step) {\n  step = step || 0;\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(step, number)) {\n    return number;\n  }\n\n  // Return delta\n  return number >= step ? 1 : 0;\n};\nexports.HEX2BIN = function (number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = number.length === 10 && number.substring(0, 1).toLowerCase() === 'f' ? true : false;\n\n  // Convert hexadecimal number to decimal\n  var decimal = negative ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.HEX2DEC = function (number) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return decimal number\n  return decimal >= 549755813888 ? decimal - 1099511627776 : decimal;\n};\nexports.HEX2OCT = function (number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return error if number is positive and greater than 0x1fffffff (536870911)\n  if (decimal > 536870911 && decimal < 1098974756864) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 1098974756864) {\n    return (decimal - 1098437885952).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = decimal.toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.IMABS = function (inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return absolute value of complex number\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\nexports.IMAGINARY = function (inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', 'j'].indexOf(inumber) >= 0) {\n    return 1;\n  }\n\n  // Normalize imaginary coefficient\n  inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = last === 'i' || last === 'j';\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return imaginary coefficient of complex number\n    if (plus >= 0) {\n      return isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1)) ? error.num : Number(inumber.substring(plus + 1, inumber.length - 1));\n    } else {\n      return isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1)) ? error.num : -Number(inumber.substring(minus + 1, inumber.length - 1));\n    }\n  } else {\n    if (unit) {\n      return isNaN(inumber.substring(0, inumber.length - 1)) ? error.num : inumber.substring(0, inumber.length - 1);\n    } else {\n      return isNaN(inumber) ? error.num : 0;\n    }\n  }\n};\nexports.IMARGUMENT = function (inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return error if inumber is equal to zero\n  if (x === 0 && y === 0) {\n    return error.div0;\n  }\n\n  // Return PI/2 if x is equal to zero and y is positive\n  if (x === 0 && y > 0) {\n    return Math.PI / 2;\n  }\n\n  // Return -PI/2 if x is equal to zero and y is negative\n  if (x === 0 && y < 0) {\n    return -Math.PI / 2;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x > 0) {\n    return 0;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x < 0) {\n    return -Math.PI;\n  }\n\n  // Return argument of complex number\n  if (x > 0) {\n    return Math.atan(y / x);\n  } else if (x < 0 && y >= 0) {\n    return Math.atan(y / x) + Math.PI;\n  } else {\n    return Math.atan(y / x) - Math.PI;\n  }\n};\nexports.IMCONJUGATE = function (inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return conjugate of complex number\n  return y !== 0 ? exports.COMPLEX(x, -y, unit) : inumber;\n};\nexports.IMCOS = function (inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return cosine of complex number\n  return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\nexports.IMCOSH = function (inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return hyperbolic cosine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);\n};\nexports.IMCOT = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return cotangent of complex number\n  return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));\n};\nexports.IMDIV = function (inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = exports.IMREAL(inumber1);\n  var b = exports.IMAGINARY(inumber1);\n  var c = exports.IMREAL(inumber2);\n  var d = exports.IMAGINARY(inumber2);\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return error if inumber2 is null\n  if (c === 0 && d === 0) {\n    return error.num;\n  }\n\n  // Return exponential of complex number\n  var den = c * c + d * d;\n  return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);\n};\nexports.IMEXP = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return exponential of complex number\n  var e = Math.exp(x);\n  return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);\n};\nexports.IMLN = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);\n};\nexports.IMLOG10 = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);\n};\nexports.IMLOG2 = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);\n};\nexports.IMPOWER = function (inumber, number) {\n  number = utils.parseNumber(number);\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(number, x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Calculate power of modulus\n  var p = Math.pow(exports.IMABS(inumber), number);\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);\n};\nexports.IMPRODUCT = function () {\n  // Initialize result\n  var result = arguments[0];\n  if (!arguments.length) {\n    return error.value;\n  }\n\n  // Loop on all numbers\n  for (var i = 1; i < arguments.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = exports.IMREAL(result);\n    var b = exports.IMAGINARY(result);\n    var c = exports.IMREAL(arguments[i]);\n    var d = exports.IMAGINARY(arguments[i]);\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = exports.COMPLEX(a * c - b * d, a * d + b * c);\n  }\n\n  // Return product of complex numbers\n  return result;\n};\nexports.IMREAL = function (inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {\n    return 0;\n  }\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = last === 'i' || last === 'j';\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return real coefficient of complex number\n    if (plus >= 0) {\n      return isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1)) ? error.num : Number(inumber.substring(0, plus));\n    } else {\n      return isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1)) ? error.num : Number(inumber.substring(0, minus));\n    }\n  } else {\n    if (unit) {\n      return isNaN(inumber.substring(0, inumber.length - 1)) ? error.num : 0;\n    } else {\n      return isNaN(inumber) ? error.num : inumber;\n    }\n  }\n};\nexports.IMSEC = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return secant of complex number\n  return exports.IMDIV('1', exports.IMCOS(inumber));\n};\nexports.IMSECH = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return hyperbolic secant of complex number\n  return exports.IMDIV('1', exports.IMCOSH(inumber));\n};\nexports.IMSIN = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return sine of complex number\n  return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\nexports.IMSINH = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Return hyperbolic sine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);\n};\nexports.IMSQRT = function (inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = unit === 'i' || unit === 'j' ? unit : 'i';\n\n  // Calculate power of modulus\n  var s = Math.sqrt(exports.IMABS(inumber));\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);\n};\nexports.IMCSC = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return cosecant of complex number\n  return exports.IMDIV('1', exports.IMSIN(inumber));\n};\nexports.IMCSCH = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return hyperbolic cosecant of complex number\n  return exports.IMDIV('1', exports.IMSINH(inumber));\n};\nexports.IMSUB = function (inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = this.IMREAL(inumber1);\n  var b = this.IMAGINARY(inumber1);\n  var c = this.IMREAL(inumber2);\n  var d = this.IMAGINARY(inumber2);\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return _ of two complex numbers\n  return this.COMPLEX(a - c, b - d, unit);\n};\nexports.IMSUM = function () {\n  if (!arguments.length) {\n    return error.value;\n  }\n  var args = utils.flatten(arguments);\n\n  // Initialize result\n  var result = args[0];\n\n  // Loop on all numbers\n  for (var i = 1; i < args.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = this.IMREAL(result);\n    var b = this.IMAGINARY(result);\n    var c = this.IMREAL(args[i]);\n    var d = this.IMAGINARY(args[i]);\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = this.COMPLEX(a + c, b + d);\n  }\n\n  // Return sum of complex numbers\n  return result;\n};\nexports.IMTAN = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return tangent of complex number\n  return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));\n};\nexports.OCT2BIN = function (number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = number.length === 10 && number.substring(0, 1) === '7' ? true : false;\n\n  // Convert octal number to decimal\n  var decimal = negative ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\nexports.OCT2DEC = function (number) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Return decimal number\n  return decimal >= 536870912 ? decimal - 1073741824 : decimal;\n};\nexports.OCT2HEX = function (number, places) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 536870912) {\n    return 'ff' + (decimal + 3221225472).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = decimal.toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return places >= result.length ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};","map":{"version":3,"names":["error","require","jStat","text","utils","bessel","isValidBinaryNumber","number","test","exports","BESSELI","x","n","parseNumber","anyIsError","value","besseli","BESSELJ","besselj","BESSELK","besselk","BESSELY","bessely","BIN2DEC","num","result","parseInt","stringified","toString","length","substring","BIN2HEX","places","undefined","isNaN","Math","floor","REPT","BIN2OCT","BITAND","number1","number2","BITLSHIFT","shift","abs","BITOR","BITRSHIFT","BITXOR","COMPLEX","real","imaginary","suffix","sign","CONVERT","from_unit","to_unit","Error","units","binary_prefixes","Yi","Zi","Ei","Pi","Ti","Gi","Mi","ki","unit_prefixes","Y","Z","E","P","T","G","M","k","h","e","d","c","m","u","p","f","a","z","y","from","to","base_from_unit","base_to_unit","from_multiplier","to_multiplier","alt","i","indexOf","from_binary_prefix","from_unit_prefix","j","to_binary_prefix","to_unit_prefix","na","DEC2BIN","DEC2HEX","DEC2OCT","DELTA","ERF","lower_bound","upper_bound","erf","PRECISE","ERFC","erfc","GESTEP","step","HEX2BIN","negative","toLowerCase","decimal","HEX2DEC","HEX2OCT","IMABS","inumber","IMREAL","IMAGINARY","sqrt","pow","replace","plus","minus","last","unit","Number","IMARGUMENT","div0","PI","atan","IMCONJUGATE","IMCOS","cos","exp","sin","IMCOSH","IMCOT","IMDIV","IMSIN","inumber1","inumber2","b","unit1","unit2","den","IMEXP","IMLN","log","IMLOG10","IMLOG2","IMPOWER","t","IMPRODUCT","arguments","IMSEC","IMSECH","IMSINH","IMSQRT","s","IMCSC","IMCSCH","IMSUB","IMSUM","args","flatten","IMTAN","OCT2BIN","OCT2DEC","OCT2HEX"],"sources":["D:/WebNodeJs/node18/trelo_project/front_end/node_modules/@handsontable/formulajs/lib/engineering.js"],"sourcesContent":["var error = require('./utils/error');\nvar jStat = require('jstat');\nvar text = require('./text');\nvar utils = require('./utils/common');\nvar bessel = require('bessel');\n\nfunction isValidBinaryNumber(number) {\n  return (/^[01]{1,10}$/).test(number);\n}\n\nexports.BESSELI = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besseli(x, n);\n};\n\nexports.BESSELJ = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselj(x, n);\n};\n\nexports.BESSELK = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.besselk(x, n);\n};\n\nexports.BESSELY = function(x, n) {\n  x = utils.parseNumber(x);\n  n = utils.parseNumber(n);\n  if (utils.anyIsError(x, n)) {\n    return error.value;\n  }\n\n  return bessel.bessely(x, n);\n};\n\nexports.BIN2DEC = function(number) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Convert binary number to decimal\n  var result = parseInt(number, 2);\n\n  // Handle negative numbers\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return parseInt(stringified.substring(1), 2) - 512;\n  } else {\n    return result;\n  }\n};\n\n\nexports.BIN2HEX = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);\n  }\n\n  // Convert binary number to hexadecimal\n  var result = parseInt(number, 2).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BIN2OCT = function(number, places) {\n  // Return error if number is not binary or contains more than 10 characters (10 digits)\n  if (!isValidBinaryNumber(number)) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  var stringified = number.toString();\n  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\n    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);\n  }\n\n  // Convert binary number to octal\n  var result = parseInt(number, 2).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.BITAND = function(number1, number2) {\n  // Return error if either number is a non-numeric value\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise AND of two numbers\n  return number1 & number2;\n};\n\nexports.BITLSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the left or to the right if shift is negative\n  return (shift >= 0) ? number << shift : number >> -shift;\n};\n\nexports.BITOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise OR of two numbers\n  return number1 | number2;\n};\n\nexports.BITRSHIFT = function(number, shift) {\n  number = utils.parseNumber(number);\n  shift = utils.parseNumber(shift);\n  if (utils.anyIsError(number, shift)) {\n    return error.value;\n  }\n\n  // Return error if number is less than 0\n  if (number < 0) {\n    return error.num;\n  }\n\n  // Return error if number is a non-integer\n  if (Math.floor(number) !== number) {\n    return error.num;\n  }\n\n  // Return error if number is greater than (2^48)-1\n  if (number > 281474976710655) {\n    return error.num;\n  }\n\n  // Return error if the absolute value of shift is greater than 53\n  if (Math.abs(shift) > 53) {\n    return error.num;\n  }\n\n  // Return number shifted by shift bits to the right or to the left if shift is negative\n  return (shift >= 0) ? number >> shift : number << -shift;\n};\n\nexports.BITXOR = function(number1, number2) {\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return error if either number is less than 0\n  if (number1 < 0 || number2 < 0) {\n    return error.num;\n  }\n\n  // Return error if either number is a non-integer\n  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\n    return error.num;\n  }\n\n  // Return error if either number is greater than (2^48)-1\n  if (number1 > 281474976710655 || number2 > 281474976710655) {\n    return error.num;\n  }\n\n  // Return bitwise XOR of two numbers\n  return number1 ^ number2;\n};\n\nexports.COMPLEX = function(real, imaginary, suffix) {\n  real = utils.parseNumber(real);\n  imaginary = utils.parseNumber(imaginary);\n  if (utils.anyIsError(real, imaginary)) {\n    return real;\n  }\n\n  // Set suffix\n  suffix = (suffix === undefined) ? 'i' : suffix;\n\n  // Return error if suffix is neither \"i\" nor \"j\"\n  if (suffix !== 'i' && suffix !== 'j') {\n    return error.value;\n  }\n\n  // Return complex number\n  if (real === 0 && imaginary === 0) {\n    return 0;\n  } else if (real === 0) {\n    return (imaginary === 1) ? suffix : imaginary.toString() + suffix;\n  } else if (imaginary === 0) {\n    return real.toString();\n  } else {\n    var sign = (imaginary > 0) ? '+' : '';\n    return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);\n  }\n};\n\nexports.CONVERT = function(number, from_unit, to_unit) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // List of units supported by CONVERT and units defined by the International System of Units\n  // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion ratio]\n  var units = [\n    [\"a.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"a.u. of charge\", \"e\", null, \"electric_charge\", false, false, 1.60217653141414e-19],\n    [\"a.u. of energy\", \"Eh\", null, \"energy\", false, false, 4.35974417757576e-18],\n    [\"a.u. of length\", \"a?\", null, \"length\", false, false, 5.29177210818182e-11],\n    [\"a.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"a.u. of time\", \"?/Eh\", null, \"time\", false, false, 2.41888432650516e-17],\n    [\"admiralty knot\", \"admkn\", null, \"speed\", false, true, 0.514773333],\n    [\"ampere\", \"A\", null, \"electric_current\", true, false, 1],\n    [\"ampere per meter\", \"A/m\", null, \"magnetic_field_intensity\", true, false, 1],\n    [\"ångström\", \"Å\", [\"ang\"], \"length\", false, true, 1e-10],\n    [\"are\", \"ar\", null, \"area\", false, true, 100],\n    [\"astronomical unit\", \"ua\", null, \"length\", false, false, 1.49597870691667e-11],\n    [\"bar\", \"bar\", null, \"pressure\", false, false, 100000],\n    [\"barn\", \"b\", null, \"area\", false, false, 1e-28],\n    [\"becquerel\", \"Bq\", null, \"radioactivity\", true, false, 1],\n    [\"bit\", \"bit\", [\"b\"], \"information\", false, true, 1],\n    [\"btu\", \"BTU\", [\"btu\"], \"energy\", false, true, 1055.05585262],\n    [\"byte\", \"byte\", null, \"information\", false, true, 8],\n    [\"candela\", \"cd\", null, \"luminous_intensity\", true, false, 1],\n    [\"candela per square metre\", \"cd/m?\", null, \"luminance\", true, false, 1],\n    [\"coulomb\", \"C\", null, \"electric_charge\", true, false, 1],\n    [\"cubic ångström\", \"ang3\", [\"ang^3\"], \"volume\", false, true, 1e-30],\n    [\"cubic foot\", \"ft3\", [\"ft^3\"], \"volume\", false, true, 0.028316846592],\n    [\"cubic inch\", \"in3\", [\"in^3\"], \"volume\", false, true, 0.000016387064],\n    [\"cubic light-year\", \"ly3\", [\"ly^3\"], \"volume\", false, true, 8.46786664623715e-47],\n    [\"cubic metre\", \"m?\", null, \"volume\", true, true, 1],\n    [\"cubic mile\", \"mi3\", [\"mi^3\"], \"volume\", false, true, 4168181825.44058],\n    [\"cubic nautical mile\", \"Nmi3\", [\"Nmi^3\"], \"volume\", false, true, 6352182208],\n    [\"cubic Pica\", \"Pica3\", [\"Picapt3\", \"Pica^3\", \"Picapt^3\"], \"volume\", false, true, 7.58660370370369e-8],\n    [\"cubic yard\", \"yd3\", [\"yd^3\"], \"volume\", false, true, 0.764554857984],\n    [\"cup\", \"cup\", null, \"volume\", false, true, 0.0002365882365],\n    [\"dalton\", \"Da\", [\"u\"], \"mass\", false, false, 1.66053886282828e-27],\n    [\"day\", \"d\", [\"day\"], \"time\", false, true, 86400],\n    [\"degree\", \"°\", null, \"angle\", false, false, 0.0174532925199433],\n    [\"degrees Rankine\", \"Rank\", null, \"temperature\", false, true, 0.555555555555556],\n    [\"dyne\", \"dyn\", [\"dy\"], \"force\", false, true, 0.00001],\n    [\"electronvolt\", \"eV\", [\"ev\"], \"energy\", false, true, 1.60217656514141],\n    [\"ell\", \"ell\", null, \"length\", false, true, 1.143],\n    [\"erg\", \"erg\", [\"e\"], \"energy\", false, true, 1e-7],\n    [\"farad\", \"F\", null, \"electric_capacitance\", true, false, 1],\n    [\"fluid ounce\", \"oz\", null, \"volume\", false, true, 0.0000295735295625],\n    [\"foot\", \"ft\", null, \"length\", false, true, 0.3048],\n    [\"foot-pound\", \"flb\", null, \"energy\", false, true, 1.3558179483314],\n    [\"gal\", \"Gal\", null, \"acceleration\", false, false, 0.01],\n    [\"gallon\", \"gal\", null, \"volume\", false, true, 0.003785411784],\n    [\"gauss\", \"G\", [\"ga\"], \"magnetic_flux_density\", false, true, 1],\n    [\"grain\", \"grain\", null, \"mass\", false, true, 0.0000647989],\n    [\"gram\", \"g\", null, \"mass\", false, true, 0.001],\n    [\"gray\", \"Gy\", null, \"absorbed_dose\", true, false, 1],\n    [\"gross registered ton\", \"GRT\", [\"regton\"], \"volume\", false, true, 2.8316846592],\n    [\"hectare\", \"ha\", null, \"area\", false, true, 10000],\n    [\"henry\", \"H\", null, \"inductance\", true, false, 1],\n    [\"hertz\", \"Hz\", null, \"frequency\", true, false, 1],\n    [\"horsepower\", \"HP\", [\"h\"], \"power\", false, true, 745.69987158227],\n    [\"horsepower-hour\", \"HPh\", [\"hh\", \"hph\"], \"energy\", false, true, 2684519.538],\n    [\"hour\", \"h\", [\"hr\"], \"time\", false, true, 3600],\n    [\"imperial gallon (U.K.)\", \"uk_gal\", null, \"volume\", false, true, 0.00454609],\n    [\"imperial hundredweight\", \"lcwt\", [\"uk_cwt\", \"hweight\"], \"mass\", false, true, 50.802345],\n    [\"imperial quart (U.K)\", \"uk_qt\", null, \"volume\", false, true, 0.0011365225],\n    [\"imperial ton\", \"brton\", [\"uk_ton\", \"LTON\"], \"mass\", false, true, 1016.046909],\n    [\"inch\", \"in\", null, \"length\", false, true, 0.0254],\n    [\"international acre\", \"uk_acre\", null, \"area\", false, true, 4046.8564224],\n    [\"IT calorie\", \"cal\", null, \"energy\", false, true, 4.1868],\n    [\"joule\", \"J\", null, \"energy\", true, true, 1],\n    [\"katal\", \"kat\", null, \"catalytic_activity\", true, false, 1],\n    [\"kelvin\", \"K\", [\"kel\"], \"temperature\", true, true, 1],\n    [\"kilogram\", \"kg\", null, \"mass\", true, true, 1],\n    [\"knot\", \"kn\", null, \"speed\", false, true, 0.514444444444444],\n    [\"light-year\", \"ly\", null, \"length\", false, true, 9460730472580800],\n    [\"litre\", \"L\", [\"l\", \"lt\"], \"volume\", false, true, 0.001],\n    [\"lumen\", \"lm\", null, \"luminous_flux\", true, false, 1],\n    [\"lux\", \"lx\", null, \"illuminance\", true, false, 1],\n    [\"maxwell\", \"Mx\", null, \"magnetic_flux\", false, false, 1e-18],\n    [\"measurement ton\", \"MTON\", null, \"volume\", false, true, 1.13267386368],\n    [\"meter per hour\", \"m/h\", [\"m/hr\"], \"speed\", false, true, 0.00027777777777778],\n    [\"meter per second\", \"m/s\", [\"m/sec\"], \"speed\", true, true, 1],\n    [\"meter per second squared\", \"m?s??\", null, \"acceleration\", true, false, 1],\n    [\"parsec\", \"pc\", [\"parsec\"], \"length\", false, true, 30856775814671900],\n    [\"meter squared per second\", \"m?/s\", null, \"kinematic_viscosity\", true, false, 1],\n    [\"metre\", \"m\", null, \"length\", true, true, 1],\n    [\"miles per hour\", \"mph\", null, \"speed\", false, true, 0.44704],\n    [\"millimetre of mercury\", \"mmHg\", null, \"pressure\", false, false, 133.322],\n    [\"minute\", \"?\", null, \"angle\", false, false, 0.000290888208665722],\n    [\"minute\", \"min\", [\"mn\"], \"time\", false, true, 60],\n    [\"modern teaspoon\", \"tspm\", null, \"volume\", false, true, 0.000005],\n    [\"mole\", \"mol\", null, \"amount_of_substance\", true, false, 1],\n    [\"morgen\", \"Morgen\", null, \"area\", false, true, 2500],\n    [\"n.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\n    [\"n.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\n    [\"n.u. of speed\", \"c?\", null, \"speed\", false, false, 299792458],\n    [\"n.u. of time\", \"?/(me?c??)\", null, \"time\", false, false, 1.28808866778687e-21],\n    [\"nautical mile\", \"M\", [\"Nmi\"], \"length\", false, true, 1852],\n    [\"newton\", \"N\", null, \"force\", true, true, 1],\n    [\"œrsted\", \"Oe \", null, \"magnetic_field_intensity\", false, false, 79.5774715459477],\n    [\"ohm\", \"Ω\", null, \"electric_resistance\", true, false, 1],\n    [\"ounce mass\", \"ozm\", null, \"mass\", false, true, 0.028349523125],\n    [\"pascal\", \"Pa\", null, \"pressure\", true, false, 1],\n    [\"pascal second\", \"Pa?s\", null, \"dynamic_viscosity\", true, false, 1],\n    [\"pferdestärke\", \"PS\", null, \"power\", false, true, 735.49875],\n    [\"phot\", \"ph\", null, \"illuminance\", false, false, 0.0001],\n    [\"pica (1/6 inch)\", \"pica\", null, \"length\", false, true, 0.00035277777777778],\n    [\"pica (1/72 inch)\", \"Pica\", [\"Picapt\"], \"length\", false, true, 0.00423333333333333],\n    [\"poise\", \"P\", null, \"dynamic_viscosity\", false, false, 0.1],\n    [\"pond\", \"pond\", null, \"force\", false, true, 0.00980665],\n    [\"pound force\", \"lbf\", null, \"force\", false, true, 4.4482216152605],\n    [\"pound mass\", \"lbm\", null, \"mass\", false, true, 0.45359237],\n    [\"quart\", \"qt\", null, \"volume\", false, true, 0.000946352946],\n    [\"radian\", \"rad\", null, \"angle\", true, false, 1],\n    [\"second\", \"?\", null, \"angle\", false, false, 0.00000484813681109536],\n    [\"second\", \"s\", [\"sec\"], \"time\", true, true, 1],\n    [\"short hundredweight\", \"cwt\", [\"shweight\"], \"mass\", false, true, 45.359237],\n    [\"siemens\", \"S\", null, \"electrical_conductance\", true, false, 1],\n    [\"sievert\", \"Sv\", null, \"equivalent_dose\", true, false, 1],\n    [\"slug\", \"sg\", null, \"mass\", false, true, 14.59390294],\n    [\"square ångström\", \"ang2\", [\"ang^2\"], \"area\", false, true, 1e-20],\n    [\"square foot\", \"ft2\", [\"ft^2\"], \"area\", false, true, 0.09290304],\n    [\"square inch\", \"in2\", [\"in^2\"], \"area\", false, true, 0.00064516],\n    [\"square light-year\", \"ly2\", [\"ly^2\"], \"area\", false, true, 8.95054210748189e+31],\n    [\"square meter\", \"m?\", null, \"area\", true, true, 1],\n    [\"square mile\", \"mi2\", [\"mi^2\"], \"area\", false, true, 2589988.110336],\n    [\"square nautical mile\", \"Nmi2\", [\"Nmi^2\"], \"area\", false, true, 3429904],\n    [\"square Pica\", \"Pica2\", [\"Picapt2\", \"Pica^2\", \"Picapt^2\"], \"area\", false, true, 0.00001792111111111],\n    [\"square yard\", \"yd2\", [\"yd^2\"], \"area\", false, true, 0.83612736],\n    [\"statute mile\", \"mi\", null, \"length\", false, true, 1609.344],\n    [\"steradian\", \"sr\", null, \"solid_angle\", true, false, 1],\n    [\"stilb\", \"sb\", null, \"luminance\", false, false, 0.0001],\n    [\"stokes\", \"St\", null, \"kinematic_viscosity\", false, false, 0.0001],\n    [\"stone\", \"stone\", null, \"mass\", false, true, 6.35029318],\n    [\"tablespoon\", \"tbs\", null, \"volume\", false, true, 0.0000147868],\n    [\"teaspoon\", \"tsp\", null, \"volume\", false, true, 0.00000492892],\n    [\"tesla\", \"T\", null, \"magnetic_flux_density\", true, true, 1],\n    [\"thermodynamic calorie\", \"c\", null, \"energy\", false, true, 4.184],\n    [\"ton\", \"ton\", null, \"mass\", false, true, 907.18474],\n    [\"tonne\", \"t\", null, \"mass\", false, false, 1000],\n    [\"U.K. pint\", \"uk_pt\", null, \"volume\", false, true, 0.00056826125],\n    [\"U.S. bushel\", \"bushel\", null, \"volume\", false, true, 0.03523907],\n    [\"U.S. oil barrel\", \"barrel\", null, \"volume\", false, true, 0.158987295],\n    [\"U.S. pint\", \"pt\", [\"us_pt\"], \"volume\", false, true, 0.000473176473],\n    [\"U.S. survey mile\", \"survey_mi\", null, \"length\", false, true, 1609.347219],\n    [\"U.S. survey/statute acre\", \"us_acre\", null, \"area\", false, true, 4046.87261],\n    [\"volt\", \"V\", null, \"voltage\", true, false, 1],\n    [\"watt\", \"W\", null, \"power\", true, true, 1],\n    [\"watt-hour\", \"Wh\", [\"wh\"], \"energy\", false, true, 3600],\n    [\"weber\", \"Wb\", null, \"magnetic_flux\", true, false, 1],\n    [\"yard\", \"yd\", null, \"length\", false, true, 0.9144],\n    [\"year\", \"yr\", null, \"time\", false, true, 31557600]\n  ];\n\n  // Binary prefixes\n  // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived from]\n  var binary_prefixes = {\n    Yi: [\"yobi\", 80, 1208925819614629174706176, \"Yi\", \"yotta\"],\n    Zi: [\"zebi\", 70, 1180591620717411303424, \"Zi\", \"zetta\"],\n    Ei: [\"exbi\", 60, 1152921504606846976, \"Ei\", \"exa\"],\n    Pi: [\"pebi\", 50, 1125899906842624, \"Pi\", \"peta\"],\n    Ti: [\"tebi\", 40, 1099511627776, \"Ti\", \"tera\"],\n    Gi: [\"gibi\", 30, 1073741824, \"Gi\", \"giga\"],\n    Mi: [\"mebi\", 20, 1048576, \"Mi\", \"mega\"],\n    ki: [\"kibi\", 10, 1024, \"ki\", \"kilo\"]\n  };\n\n  // Unit prefixes\n  // [Name, Multiplier, Abbreviation]\n  var unit_prefixes = {\n    Y: [\"yotta\", 1e+24, \"Y\"],\n    Z: [\"zetta\", 1e+21, \"Z\"],\n    E: [\"exa\", 1e+18, \"E\"],\n    P: [\"peta\", 1e+15, \"P\"],\n    T: [\"tera\", 1e+12, \"T\"],\n    G: [\"giga\", 1e+09, \"G\"],\n    M: [\"mega\", 1e+06, \"M\"],\n    k: [\"kilo\", 1e+03, \"k\"],\n    h: [\"hecto\", 1e+02, \"h\"],\n    e: [\"dekao\", 1e+01, \"e\"],\n    d: [\"deci\", 1e-01, \"d\"],\n    c: [\"centi\", 1e-02, \"c\"],\n    m: [\"milli\", 1e-03, \"m\"],\n    u: [\"micro\", 1e-06, \"u\"],\n    n: [\"nano\", 1e-09, \"n\"],\n    p: [\"pico\", 1e-12, \"p\"],\n    f: [\"femto\", 1e-15, \"f\"],\n    a: [\"atto\", 1e-18, \"a\"],\n    z: [\"zepto\", 1e-21, \"z\"],\n    y: [\"yocto\", 1e-24, \"y\"]\n  };\n\n  // Initialize units and multipliers\n  var from = null;\n  var to = null;\n  var base_from_unit = from_unit;\n  var base_to_unit = to_unit;\n  var from_multiplier = 1;\n  var to_multiplier = 1;\n  var alt;\n\n  // Lookup from and to units\n  for (var i = 0; i < units.length; i++) {\n    alt = (units[i][2] === null) ? [] : units[i][2];\n    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n      from = units[i];\n    }\n    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n      to = units[i];\n    }\n  }\n\n  // Lookup from prefix\n  if (from === null) {\n    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];\n    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (from_unit.substring(0, 2) === 'da') {\n      from_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (from_binary_prefix) {\n      from_multiplier = from_binary_prefix[2];\n      base_from_unit = from_unit.substring(2);\n    } else if (from_unit_prefix) {\n      from_multiplier = from_unit_prefix[1];\n      base_from_unit = from_unit.substring(from_unit_prefix[2].length);\n    }\n\n    // Lookup from unit\n    for (var j = 0; j < units.length; j++) {\n      alt = (units[j][2] === null) ? [] : units[j][2];\n      if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\n        from = units[j];\n      }\n    }\n  }\n\n  // Lookup to prefix\n  if (to === null) {\n    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];\n    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];\n\n    // Handle dekao unit prefix (only unit prefix with two characters)\n    if (to_unit.substring(0, 2) === 'da') {\n      to_unit_prefix = [\"dekao\", 1e+01, \"da\"];\n    }\n\n    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')\n    if (to_binary_prefix) {\n      to_multiplier = to_binary_prefix[2];\n      base_to_unit = to_unit.substring(2);\n    } else if (to_unit_prefix) {\n      to_multiplier = to_unit_prefix[1];\n      base_to_unit = to_unit.substring(to_unit_prefix[2].length);\n    }\n\n    // Lookup to unit\n    for (var k = 0; k < units.length; k++) {\n      alt = (units[k][2] === null) ? [] : units[k][2];\n      if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\n        to = units[k];\n      }\n    }\n  }\n\n  // Return error if a unit does not exist\n  if (from === null || to === null) {\n    return error.na;\n  }\n\n  // Return error if units represent different quantities\n  if (from[3] !== to[3]) {\n    return error.na;\n  }\n\n  // Return converted number\n  return number * from[6] * from_multiplier / (to[6] * to_multiplier);\n};\n\nexports.DEC2BIN = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -512, or is greater than 511\n  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (number < 0) {\n    return '1' + text.REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = parseInt(number, 10).toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2HEX = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character hexadecimal number if number is negative\n  if (number < 0) {\n    return (1099511627776 + number).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = parseInt(number, 10).toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DEC2OCT = function(number, places) {\n  number = utils.parseNumber(number);\n  if (number instanceof Error) {\n    return number;\n  }\n\n  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887\n  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (number < 0) {\n    return (1073741824 + number).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = parseInt(number, 10).toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.DELTA = function(number1, number2) {\n  // Set number2 to zero if undefined\n  number2 = (number2 === undefined) ? 0 : number2;\n  number1 = utils.parseNumber(number1);\n  number2 = utils.parseNumber(number2);\n  if (utils.anyIsError(number1, number2)) {\n    return error.value;\n  }\n\n  // Return delta\n  return (number1 === number2) ? 1 : 0;\n};\n\n// TODO: why is upper_bound not used ? The excel documentation has no examples with upper_bound\nexports.ERF = function(lower_bound, upper_bound) {\n  // Set number2 to zero if undefined\n  upper_bound = (upper_bound === undefined) ? 0 : upper_bound;\n\n  lower_bound = utils.parseNumber(lower_bound);\n  upper_bound = utils.parseNumber(upper_bound);\n  if (utils.anyIsError(lower_bound, upper_bound)) {\n    return error.value;\n  }\n\n  return jStat.erf(lower_bound);\n};\n\n// TODO\nexports.ERF.PRECISE = function() {\n  throw new Error('ERF.PRECISE is not implemented');\n};\n\nexports.ERFC = function(x) {\n  // Return error if x is not a number\n  if (isNaN(x)) {\n    return error.value;\n  }\n\n  return jStat.erfc(x);\n};\n\n// TODO\nexports.ERFC.PRECISE = function() {\n  throw new Error('ERFC.PRECISE is not implemented');\n};\n\nexports.GESTEP = function(number, step) {\n  step = step || 0;\n  number = utils.parseNumber(number);\n  if (utils.anyIsError(step, number)) {\n    return number;\n  }\n\n  // Return delta\n  return (number >= step) ? 1 : 0;\n};\n\nexports.HEX2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;\n\n  // Convert hexadecimal number to decimal\n  var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.HEX2DEC = function(number) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return decimal number\n  return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;\n};\n\nexports.HEX2OCT = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert hexadecimal number to decimal\n  var decimal = parseInt(number, 16);\n\n  // Return error if number is positive and greater than 0x1fffffff (536870911)\n  if (decimal > 536870911 && decimal < 1098974756864) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 1098974756864) {\n    return (decimal - 1098437885952).toString(8);\n  }\n\n  // Convert decimal number to octal\n  var result = decimal.toString(8);\n\n  // Return octal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.IMABS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return absolute value of complex number\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n};\n\nexports.IMAGINARY = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', 'j'].indexOf(inumber) >= 0) {\n    return 1;\n  }\n\n  // Normalize imaginary coefficient\n  inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return imaginary coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(plus + 1, inumber.length - 1));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        -Number(inumber.substring(minus + 1, inumber.length - 1));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);\n    } else {\n      return (isNaN(inumber)) ? error.num : 0;\n    }\n  }\n};\n\nexports.IMARGUMENT = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return error if inumber is equal to zero\n  if (x === 0 && y === 0) {\n    return error.div0;\n  }\n\n  // Return PI/2 if x is equal to zero and y is positive\n  if (x === 0 && y > 0) {\n    return Math.PI / 2;\n  }\n\n  // Return -PI/2 if x is equal to zero and y is negative\n  if (x === 0 && y < 0) {\n    return -Math.PI / 2;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x > 0) {\n    return 0;\n  }\n\n  // Return zero if x is negative and y is equal to zero\n  if (y === 0 && x < 0) {\n    return -Math.PI;\n  }\n\n  // Return argument of complex number\n  if (x > 0) {\n    return Math.atan(y / x);\n  } else if (x < 0 && y >= 0) {\n    return Math.atan(y / x) + Math.PI;\n  } else {\n    return Math.atan(y / x) - Math.PI;\n  }\n};\n\nexports.IMCONJUGATE = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return conjugate of complex number\n  return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;\n};\n\nexports.IMCOS = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return cosine of complex number\n  return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMCOSH = function(inumber) {\n  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic cosine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);\n};\n\nexports.IMCOT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return cotangent of complex number\n  return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));\n};\n\nexports.IMDIV = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = exports.IMREAL(inumber1);\n  var b = exports.IMAGINARY(inumber1);\n  var c = exports.IMREAL(inumber2);\n  var d = exports.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return error if inumber2 is null\n  if (c === 0 && d === 0) {\n    return error.num;\n  }\n\n  // Return exponential of complex number\n  var den = c * c + d * d;\n  return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);\n};\n\nexports.IMEXP = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  var e = Math.exp(x);\n  return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);\n};\n\nexports.IMLN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);\n};\n\nexports.IMLOG10 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);\n};\n\nexports.IMLOG2 = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return exponential of complex number\n  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);\n};\n\nexports.IMPOWER = function(inumber, number) {\n  number = utils.parseNumber(number);\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n  if (utils.anyIsError(number, x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var p = Math.pow(exports.IMABS(inumber), number);\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);\n};\n\nexports.IMPRODUCT = function() {\n  // Initialize result\n  var result = arguments[0];\n\n  if (!arguments.length) {\n    return error.value;\n  }\n\n  // Loop on all numbers\n  for (var i = 1; i < arguments.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = exports.IMREAL(result);\n    var b = exports.IMAGINARY(result);\n    var c = exports.IMREAL(arguments[i]);\n    var d = exports.IMAGINARY(arguments[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = exports.COMPLEX(a * c - b * d, a * d + b * c);\n  }\n\n  // Return product of complex numbers\n  return result;\n};\n\nexports.IMREAL = function(inumber) {\n  if (inumber === undefined || inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Return 0 if inumber is equal to 0\n  if (inumber === 0 || inumber === '0') {\n    return 0;\n  }\n\n  // Handle special cases\n  if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {\n    return 0;\n  }\n\n  // Lookup sign\n  var plus = inumber.indexOf('+');\n  var minus = inumber.indexOf('-');\n  if (plus === 0) {\n    plus = inumber.indexOf('+', 1);\n  }\n  if (minus === 0) {\n    minus = inumber.indexOf('-', 1);\n  }\n\n  // Lookup imaginary unit\n  var last = inumber.substring(inumber.length - 1, inumber.length);\n  var unit = (last === 'i' || last === 'j');\n\n  if (plus >= 0 || minus >= 0) {\n    // Return error if imaginary unit is neither i nor j\n    if (!unit) {\n      return error.num;\n    }\n\n    // Return real coefficient of complex number\n    if (plus >= 0) {\n      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, plus));\n    } else {\n      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\n        error.num :\n        Number(inumber.substring(0, minus));\n    }\n  } else {\n    if (unit) {\n      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;\n    } else {\n      return (isNaN(inumber)) ? error.num : inumber;\n    }\n  }\n};\n\nexports.IMSEC = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return secant of complex number\n  return exports.IMDIV('1', exports.IMCOS(inumber));\n};\n\nexports.IMSECH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return hyperbolic secant of complex number\n  return exports.IMDIV('1', exports.IMCOSH(inumber));\n};\n\nexports.IMSIN = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return sine of complex number\n  return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\n};\n\nexports.IMSINH = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Return hyperbolic sine of complex number\n  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);\n};\n\nexports.IMSQRT = function(inumber) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit = inumber.substring(inumber.length - 1);\n  unit = (unit === 'i' || unit === 'j') ? unit : 'i';\n\n  // Calculate power of modulus\n  var s = Math.sqrt(exports.IMABS(inumber));\n\n  // Calculate argument\n  var t = exports.IMARGUMENT(inumber);\n\n  // Return exponential of complex number\n  return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);\n};\n\nexports.IMCSC = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return cosecant of complex number\n  return exports.IMDIV('1', exports.IMSIN(inumber));\n};\n\nexports.IMCSCH = function (inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  // Return error if either coefficient is not a number\n  if (utils.anyIsError(x, y)) {\n    return error.num;\n  }\n\n  // Return hyperbolic cosecant of complex number\n  return exports.IMDIV('1', exports.IMSINH(inumber));\n};\n\nexports.IMSUB = function(inumber1, inumber2) {\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var a = this.IMREAL(inumber1);\n  var b = this.IMAGINARY(inumber1);\n  var c = this.IMREAL(inumber2);\n  var d = this.IMAGINARY(inumber2);\n\n  if (utils.anyIsError(a, b, c, d)) {\n    return error.value;\n  }\n\n  // Lookup imaginary unit\n  var unit1 = inumber1.substring(inumber1.length - 1);\n  var unit2 = inumber2.substring(inumber2.length - 1);\n  var unit = 'i';\n  if (unit1 === 'j') {\n    unit = 'j';\n  } else if (unit2 === 'j') {\n    unit = 'j';\n  }\n\n  // Return _ of two complex numbers\n  return this.COMPLEX(a - c, b - d, unit);\n};\n\nexports.IMSUM = function() {\n  if (!arguments.length) {\n    return error.value;\n  }\n  var args = utils.flatten(arguments);\n\n  // Initialize result\n  var result = args[0];\n\n  // Loop on all numbers\n  for (var i = 1; i < args.length; i++) {\n    // Lookup coefficients of two complex numbers\n    var a = this.IMREAL(result);\n    var b = this.IMAGINARY(result);\n    var c = this.IMREAL(args[i]);\n    var d = this.IMAGINARY(args[i]);\n\n    if (utils.anyIsError(a, b, c, d)) {\n      return error.value;\n    }\n\n    // Complute product of two complex numbers\n    result = this.COMPLEX(a + c, b + d);\n  }\n\n  // Return sum of complex numbers\n  return result;\n};\n\nexports.IMTAN = function(inumber) {\n  // Return error if inumber is a logical value\n  if (inumber === true || inumber === false) {\n    return error.value;\n  }\n\n  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]\n  var x = exports.IMREAL(inumber);\n  var y = exports.IMAGINARY(inumber);\n\n  if (utils.anyIsError(x, y)) {\n    return error.value;\n  }\n\n  // Return tangent of complex number\n  return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));\n};\n\nexports.OCT2BIN = function(number, places) {\n  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Check if number is negative\n  var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;\n\n  // Convert octal number to decimal\n  var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);\n\n  // Return error if number is lower than -512 or greater than 511\n  if (decimal < -512 || decimal > 511) {\n    return error.num;\n  }\n\n  // Ignore places and return a 10-character binary number if number is negative\n  if (negative) {\n    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\n  }\n\n  // Convert decimal number to binary\n  var result = decimal.toString(2);\n\n  // Return binary number using the minimum number of characters necessary if places is undefined\n  if (typeof places === 'undefined') {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n\nexports.OCT2DEC = function(number) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Return decimal number\n  return (decimal >= 536870912) ? decimal - 1073741824 : decimal;\n};\n\nexports.OCT2HEX = function(number, places) {\n  // Return error if number is not octal or contains more than ten characters (10 digits)\n  if (!/^[0-7]{1,10}$/.test(number)) {\n    return error.num;\n  }\n\n  // Convert octal number to decimal\n  var decimal = parseInt(number, 8);\n\n  // Ignore places and return a 10-character octal number if number is negative\n  if (decimal >= 536870912) {\n    return 'ff' + (decimal + 3221225472).toString(16);\n  }\n\n  // Convert decimal number to hexadecimal\n  var result = decimal.toString(16);\n\n  // Return hexadecimal number using the minimum number of characters necessary if places is undefined\n  if (places === undefined) {\n    return result;\n  } else {\n    // Return error if places is nonnumeric\n    if (isNaN(places)) {\n      return error.value;\n    }\n\n    // Return error if places is negative\n    if (places < 0) {\n      return error.num;\n    }\n\n    // Truncate places in case it is not an integer\n    places = Math.floor(places);\n\n    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)\n    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}