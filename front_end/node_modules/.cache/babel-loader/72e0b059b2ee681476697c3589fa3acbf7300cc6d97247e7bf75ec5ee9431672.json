{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/* eslint-disable import/no-named-as-default-member */\nimport add from \"./operator/add.mjs\";\nimport ampersand from \"./operator/ampersand.mjs\";\nimport divide from \"./operator/divide.mjs\";\nimport equal from \"./operator/equal.mjs\";\nimport formulaFunction from \"./operator/formula-function.mjs\";\nimport greaterThan from \"./operator/greater-than.mjs\";\nimport greaterThanOrEqual from \"./operator/greater-than-or-equal.mjs\";\nimport lessThan from \"./operator/less-than.mjs\";\nimport lessThanOrEqual from \"./operator/less-than-or-equal.mjs\";\nimport minus from \"./operator/minus.mjs\";\nimport multiply from \"./operator/multiply.mjs\";\nimport notEqual from \"./operator/not-equal.mjs\";\nimport power from \"./operator/power.mjs\";\nimport { ERROR_NAME } from \"./../error.mjs\";\nvar availableOperators = Object.create(null);\n/**\n * Evaluate values by operator id.git\n *\n * @param {String} operator Operator id.\n * @param {Array} [params=[]] Arguments to evaluate.\n * @returns {*}\n */\n\nexport default function evaluateByOperator(operator) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  operator = operator.toUpperCase();\n  if (!availableOperators[operator]) {\n    throw Error(ERROR_NAME);\n  }\n  return availableOperators[operator].apply(availableOperators, _toConsumableArray(params));\n}\n/**\n * Register operator.\n *\n * @param {String|Array} symbol Symbol to register.\n * @param {Function} func Logic to register for this symbol.\n */\n\nexport function registerOperation(symbol, func) {\n  if (!Array.isArray(symbol)) {\n    symbol = [symbol.toUpperCase()];\n  }\n  symbol.forEach(function (s) {\n    if (func.isFactory) {\n      availableOperators[s] = func(s);\n    } else {\n      availableOperators[s] = func;\n    }\n  });\n}\nregisterOperation(add.SYMBOL, add);\nregisterOperation(ampersand.SYMBOL, ampersand);\nregisterOperation(divide.SYMBOL, divide);\nregisterOperation(equal.SYMBOL, equal);\nregisterOperation(power.SYMBOL, power);\nregisterOperation(formulaFunction.SYMBOL, formulaFunction);\nregisterOperation(greaterThan.SYMBOL, greaterThan);\nregisterOperation(greaterThanOrEqual.SYMBOL, greaterThanOrEqual);\nregisterOperation(lessThan.SYMBOL, lessThan);\nregisterOperation(lessThanOrEqual.SYMBOL, lessThanOrEqual);\nregisterOperation(multiply.SYMBOL, multiply);\nregisterOperation(notEqual.SYMBOL, notEqual);\nregisterOperation(minus.SYMBOL, minus);","map":{"version":3,"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","add","ampersand","divide","equal","formulaFunction","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","minus","multiply","notEqual","power","ERROR_NAME","availableOperators","create","evaluateByOperator","operator","params","arguments","undefined","toUpperCase","Error","apply","registerOperation","symbol","func","forEach","s","isFactory","SYMBOL"],"sources":["D:/WebNodeJs/node18/trelo_project/front_end/node_modules/hot-formula-parser/evaluate-by-operator/evaluate-by-operator.mjs"],"sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* eslint-disable import/no-named-as-default-member */\nimport add from \"./operator/add.mjs\";\nimport ampersand from \"./operator/ampersand.mjs\";\nimport divide from \"./operator/divide.mjs\";\nimport equal from \"./operator/equal.mjs\";\nimport formulaFunction from \"./operator/formula-function.mjs\";\nimport greaterThan from \"./operator/greater-than.mjs\";\nimport greaterThanOrEqual from \"./operator/greater-than-or-equal.mjs\";\nimport lessThan from \"./operator/less-than.mjs\";\nimport lessThanOrEqual from \"./operator/less-than-or-equal.mjs\";\nimport minus from \"./operator/minus.mjs\";\nimport multiply from \"./operator/multiply.mjs\";\nimport notEqual from \"./operator/not-equal.mjs\";\nimport power from \"./operator/power.mjs\";\nimport { ERROR_NAME } from \"./../error.mjs\";\nvar availableOperators = Object.create(null);\n/**\n * Evaluate values by operator id.git\n *\n * @param {String} operator Operator id.\n * @param {Array} [params=[]] Arguments to evaluate.\n * @returns {*}\n */\n\nexport default function evaluateByOperator(operator) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  operator = operator.toUpperCase();\n\n  if (!availableOperators[operator]) {\n    throw Error(ERROR_NAME);\n  }\n\n  return availableOperators[operator].apply(availableOperators, _toConsumableArray(params));\n}\n/**\n * Register operator.\n *\n * @param {String|Array} symbol Symbol to register.\n * @param {Function} func Logic to register for this symbol.\n */\n\nexport function registerOperation(symbol, func) {\n  if (!Array.isArray(symbol)) {\n    symbol = [symbol.toUpperCase()];\n  }\n\n  symbol.forEach(function (s) {\n    if (func.isFactory) {\n      availableOperators[s] = func(s);\n    } else {\n      availableOperators[s] = func;\n    }\n  });\n}\nregisterOperation(add.SYMBOL, add);\nregisterOperation(ampersand.SYMBOL, ampersand);\nregisterOperation(divide.SYMBOL, divide);\nregisterOperation(equal.SYMBOL, equal);\nregisterOperation(power.SYMBOL, power);\nregisterOperation(formulaFunction.SYMBOL, formulaFunction);\nregisterOperation(greaterThan.SYMBOL, greaterThan);\nregisterOperation(greaterThanOrEqual.SYMBOL, greaterThanOrEqual);\nregisterOperation(lessThan.SYMBOL, lessThan);\nregisterOperation(lessThanOrEqual.SYMBOL, lessThanOrEqual);\nregisterOperation(multiply.SYMBOL, multiply);\nregisterOperation(notEqual.SYMBOL, notEqual);\nregisterOperation(minus.SYMBOL, minus);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}