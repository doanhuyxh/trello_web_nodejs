{"ast":null,"code":"var error = require('./utils/error');\nvar stats = require('./statistical');\nvar maths = require('./math-trig');\nvar utils = require('./utils/common');\nvar evalExpression = require('./utils/criteria-eval');\nfunction compact(array) {\n  var result = [];\n  utils.arrayEach(array, function (value) {\n    if (value) {\n      result.push(value);\n    }\n  });\n  return result;\n}\nexports.FINDFIELD = function (database, title) {\n  var index = null;\n  utils.arrayEach(database, function (value, i) {\n    if (value[0] === title) {\n      index = i;\n      return false;\n    }\n  });\n\n  // Return error if the input field title is incorrect\n  if (index == null) {\n    return error.value;\n  }\n  return index;\n};\nfunction findResultIndex(database, criterias) {\n  var matches = {};\n  for (var i = 1; i < database[0].length; ++i) {\n    matches[i] = true;\n  }\n  var maxCriteriaLength = criterias[0].length;\n  for (i = 1; i < criterias.length; ++i) {\n    if (criterias[i].length > maxCriteriaLength) {\n      maxCriteriaLength = criterias[i].length;\n    }\n  }\n  for (var k = 1; k < database.length; ++k) {\n    for (var l = 1; l < database[k].length; ++l) {\n      var currentCriteriaResult = false;\n      var hasMatchingCriteria = false;\n      for (var j = 0; j < criterias.length; ++j) {\n        var criteria = criterias[j];\n        if (criteria.length < maxCriteriaLength) {\n          continue;\n        }\n        var criteriaField = criteria[0];\n        if (database[k][0] !== criteriaField) {\n          continue;\n        }\n        hasMatchingCriteria = true;\n        for (var p = 1; p < criteria.length; ++p) {\n          if (!currentCriteriaResult) {\n            var isWildcard = criteria[p] === void 0 || criteria[p] === '*';\n            if (isWildcard) {\n              currentCriteriaResult = true;\n            } else {\n              var tokenizedCriteria = evalExpression.parse(criteria[p] + '');\n              var tokens = [evalExpression.createToken(database[k][l], evalExpression.TOKEN_TYPE_LITERAL)].concat(tokenizedCriteria);\n              currentCriteriaResult = evalExpression.compute(tokens);\n            }\n          }\n        }\n      }\n      if (hasMatchingCriteria) {\n        matches[l] = matches[l] && currentCriteriaResult;\n      }\n    }\n  }\n  var result = [];\n  for (var n = 0; n < database[0].length; ++n) {\n    if (matches[n]) {\n      result.push(n - 1);\n    }\n  }\n  return result;\n}\n\n// Database functions\nexports.DAVERAGE = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var sum = 0;\n  utils.arrayEach(resultIndexes, function (value) {\n    sum += targetFields[value];\n  });\n  return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;\n};\nexports.DCOUNT = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  return stats.COUNT(targetValues);\n};\nexports.DCOUNTA = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  return stats.COUNTA(targetValues);\n};\nexports.DGET = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  // Return error if no record meets the criteria\n  if (resultIndexes.length === 0) {\n    return error.value;\n  }\n  // Returns the #NUM! error value because more than one record meets the\n  // criteria\n  if (resultIndexes.length > 1) {\n    return error.num;\n  }\n  return targetFields[resultIndexes[0]];\n};\nexports.DMAX = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var maxValue = targetFields[resultIndexes[0]];\n  utils.arrayEach(resultIndexes, function (value) {\n    if (maxValue < targetFields[value]) {\n      maxValue = targetFields[value];\n    }\n  });\n  return maxValue;\n};\nexports.DMIN = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var minValue = targetFields[resultIndexes[0]];\n  utils.arrayEach(resultIndexes, function (value) {\n    if (minValue > targetFields[value]) {\n      minValue = targetFields[value];\n    }\n  });\n  return minValue;\n};\nexports.DPRODUCT = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n  var result = 1;\n  utils.arrayEach(targetValues, function (value) {\n    result *= value;\n  });\n  return result;\n};\nexports.DSTDEV = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n  return stats.STDEV.S(targetValues);\n};\nexports.DSTDEVP = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n  return stats.STDEV.P(targetValues);\n};\nexports.DSUM = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  return maths.SUM(targetValues);\n};\nexports.DVAR = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  return stats.VAR.S(targetValues);\n};\nexports.DVARP = function (database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && typeof field !== \"string\") {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n  utils.arrayEach(resultIndexes, function (value) {\n    targetValues.push(targetFields[value]);\n  });\n  return stats.VAR.P(targetValues);\n};","map":{"version":3,"names":["error","require","stats","maths","utils","evalExpression","compact","array","result","arrayEach","value","push","exports","FINDFIELD","database","title","index","i","findResultIndex","criterias","matches","length","maxCriteriaLength","k","l","currentCriteriaResult","hasMatchingCriteria","j","criteria","criteriaField","p","isWildcard","tokenizedCriteria","parse","tokens","createToken","TOKEN_TYPE_LITERAL","concat","compute","n","DAVERAGE","field","isNaN","resultIndexes","targetFields","rest","sum","div0","DCOUNT","targetValues","COUNT","DCOUNTA","COUNTA","DGET","num","DMAX","maxValue","DMIN","minValue","DPRODUCT","DSTDEV","STDEV","S","DSTDEVP","P","DSUM","SUM","DVAR","VAR","DVARP"],"sources":["D:/WebNodeJs/node18/trelo_project/front_end/node_modules/@handsontable/formulajs/lib/database.js"],"sourcesContent":["var error = require('./utils/error');\nvar stats = require('./statistical');\nvar maths = require('./math-trig');\nvar utils = require('./utils/common');\nvar evalExpression = require('./utils/criteria-eval');\n\nfunction compact(array) {\n  var result = [];\n\n  utils.arrayEach(array, function(value) {\n    if (value) {\n      result.push(value);\n    }\n  });\n\n  return result;\n}\n\nexports.FINDFIELD = function(database, title) {\n  var index = null;\n\n  utils.arrayEach(database, function(value, i) {\n    if (value[0] === title) {\n      index = i;\n      return false;\n    }\n  });\n\n  // Return error if the input field title is incorrect\n  if (index == null) {\n    return error.value;\n  }\n\n  return index;\n};\n\nfunction findResultIndex(database, criterias) {\n  var matches = {};\n  for (var i = 1; i < database[0].length; ++i) {\n    matches[i] = true;\n  }\n  var maxCriteriaLength = criterias[0].length;\n  for (i = 1; i < criterias.length; ++i) {\n    if (criterias[i].length > maxCriteriaLength) {\n      maxCriteriaLength = criterias[i].length;\n    }\n  }\n\n  for (var k = 1; k < database.length; ++k) {\n    for (var l = 1; l < database[k].length; ++l) {\n      var currentCriteriaResult = false;\n      var hasMatchingCriteria   = false;\n      for (var j = 0; j < criterias.length; ++j) {\n        var criteria = criterias[j];\n        if (criteria.length < maxCriteriaLength) {\n          continue;\n        }\n\n        var criteriaField = criteria[0];\n        if (database[k][0] !== criteriaField) {\n          continue;\n        }\n        hasMatchingCriteria = true;\n        for (var p = 1; p < criteria.length; ++p) {\n          if (!currentCriteriaResult) {\n            var isWildcard = criteria[p] === void 0 || criteria[p] === '*';\n\n            if (isWildcard) {\n              currentCriteriaResult = true;\n            } else {\n              var tokenizedCriteria = evalExpression.parse(criteria[p] + '');\n              var tokens = [evalExpression.createToken(database[k][l], evalExpression.TOKEN_TYPE_LITERAL)].concat(tokenizedCriteria);\n\n              currentCriteriaResult = evalExpression.compute(tokens);\n            }\n          }\n        }\n      }\n      if (hasMatchingCriteria) {\n        matches[l] = matches[l] && currentCriteriaResult;\n      }\n    }\n  }\n\n  var result = [];\n  for (var n = 0; n < database[0].length; ++n) {\n    if (matches[n]) {\n      result.push(n - 1);\n    }\n  }\n\n  return result;\n}\n\n// Database functions\nexports.DAVERAGE = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var sum = 0;\n\n  utils.arrayEach(resultIndexes, function(value) {\n    sum += targetFields[value];\n  });\n\n  return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;\n};\n\nexports.DCOUNT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNT(targetValues);\n};\n\nexports.DCOUNTA = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.COUNTA(targetValues);\n};\n\nexports.DGET = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  // Return error if no record meets the criteria\n  if (resultIndexes.length === 0) {\n    return error.value;\n  }\n  // Returns the #NUM! error value because more than one record meets the\n  // criteria\n  if (resultIndexes.length > 1) {\n    return error.num;\n  }\n\n  return targetFields[resultIndexes[0]];\n};\n\nexports.DMAX = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var maxValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (maxValue < targetFields[value]) {\n      maxValue = targetFields[value];\n    }\n  });\n\n  return maxValue;\n};\n\nexports.DMIN = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var minValue = targetFields[resultIndexes[0]];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    if (minValue > targetFields[value]) {\n      minValue = targetFields[value];\n    }\n  });\n\n  return minValue;\n};\n\nexports.DPRODUCT = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  var result = 1;\n\n  utils.arrayEach(targetValues, function(value) {\n    result *= value;\n  });\n\n  return result;\n};\n\nexports.DSTDEV = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.S(targetValues);\n};\n\nexports.DSTDEVP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n  targetValues = compact(targetValues);\n\n  return stats.STDEV.P(targetValues);\n};\n\nexports.DSUM = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return maths.SUM(targetValues);\n};\n\nexports.DVAR = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.S(targetValues);\n};\n\nexports.DVARP = function(database, field, criteria) {\n  // Return error if field is not a number and not a string\n  if (isNaN(field) && (typeof field !== \"string\")) {\n    return error.value;\n  }\n  var resultIndexes = findResultIndex(database, criteria);\n  var targetFields = [];\n\n  if (typeof field === \"string\") {\n    var index = exports.FINDFIELD(database, field);\n    targetFields = utils.rest(database[index]);\n  } else {\n    targetFields = utils.rest(database[field]);\n  }\n  var targetValues = [];\n\n  utils.arrayEach(resultIndexes, function(value) {\n    targetValues.push(targetFields[value]);\n  });\n\n  return stats.VAR.P(targetValues);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}