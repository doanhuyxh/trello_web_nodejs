{"ast":null,"code":"import { createContext as createContext$1, useContext as useContext$1, useReducer, createElement, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { unstable_runWithPriority, unstable_NormalPriority } from 'scheduler';\nimport { unstable_batchedUpdates } from 'react-dom';\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\nconst isSSR = typeof window === 'undefined' || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = unstable_runWithPriority ? thunk => {\n  try {\n    unstable_runWithPriority(unstable_NormalPriority, thunk);\n  } catch (e) {\n    if (e.message === 'Not implemented.') {\n      thunk();\n    } else {\n      throw e;\n    }\n  }\n} : thunk => thunk();\nconst createProvider = ProviderOrig => {\n  const ContextProvider = ({\n    value,\n    children\n  }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const [resolve, setResolve] = useState(null);\n    if (resolve) {\n      resolve(value);\n      setResolve(null);\n    }\n    const contextValue = useRef();\n    if (!contextValue.current) {\n      const listeners = new Set();\n      const update = (thunk, options) => {\n        unstable_batchedUpdates(() => {\n          versionRef.current += 1;\n          const action = {\n            n: versionRef.current\n          };\n          if (options != null && options.suspense) {\n            action.n *= -1; // this is intentional to make it temporary version\n            action.p = new Promise(r => {\n              setResolve(() => v => {\n                action.v = v;\n                delete action.p;\n                r(v);\n              });\n            });\n          }\n          listeners.forEach(listener => listener(action));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */v: valueRef,\n          /* versio\"n\"   */n: versionRef,\n          /* \"l\"isteners */l: listeners,\n          /* \"u\"pdate    */u: update\n        }\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        contextValue.current[CONTEXT_VALUE].l.forEach(listener => {\n          listener({\n            n: versionRef.current,\n            v: value\n          });\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, {\n      value: contextValue.current\n    }, children);\n  };\n  return ContextProvider;\n};\nconst identity = x => x;\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nfunction createContext(defaultValue) {\n  const context = createContext$1({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */v: {\n        current: defaultValue\n      },\n      /* versio\"n\"   */n: {\n        current: -1\n      },\n      /* \"l\"isteners */l: new Set(),\n      /* \"u\"pdate    */u: f => f()\n    }\n  });\n  context[ORIGINAL_PROVIDER] = context.Provider;\n  context.Provider = createProvider(context.Provider);\n  delete context.Consumer; // no support for Consumer\n  return context;\n}\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nfunction useContextSelector(context, selector) {\n  const contextValue = useContext$1(context)[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */v: {\n      current: value\n    },\n    /* versio\"n\"   */n: {\n      current: version\n    },\n    /* \"l\"isteners */l: listeners\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((prev, action) => {\n    if (!action) {\n      // case for `dispatch()` below\n      return [value, selected];\n    }\n    if ('p' in action) {\n      throw action.p;\n    }\n    if (action.n === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected];\n    }\n    try {\n      if ('v' in action) {\n        if (Object.is(prev[0], action.v)) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(action.v);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [action.v, nextSelected];\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev]; // schedule update\n  }, [value, selected]);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nfunction useContext(context) {\n  return useContextSelector(context, identity);\n}\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * concurrent rendering in React 18.\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n *\n * // Wrap set state function\n * update(() => setState(...));\n *\n * // Experimental suspense mode\n * update(() => setState(...), { suspense: true });\n */\nfunction useContextUpdate(context) {\n  const contextValue = useContext$1(context)[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const {\n    u: update\n  } = contextValue;\n  return update;\n}\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nconst BridgeProvider = ({\n  context,\n  value,\n  children\n}) => {\n  const {\n    [ORIGINAL_PROVIDER]: ProviderOrig\n  } = context;\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, {\n    value\n  }, children);\n};\n/**\n * This hook return a value for BridgeProvider\n */\nconst useBridgeValue = context => {\n  const bridgeValue = useContext$1(context);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue;\n};\nexport { BridgeProvider, createContext, useBridgeValue, useContext, useContextSelector, useContextUpdate };","map":{"version":3,"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","isSSR","window","test","navigator","userAgent","useIsomorphicLayoutEffect","useEffect","useLayoutEffect","runWithNormalPriority","unstable_runWithPriority","thunk","unstable_NormalPriority","e","message","createProvider","ProviderOrig","ContextProvider","value","children","valueRef","useRef","versionRef","resolve","setResolve","useState","contextValue","current","listeners","Set","update","options","unstable_batchedUpdates","action","n","suspense","p","Promise","r","v","forEach","listener","l","u","createElement","identity","x","createContext","defaultValue","context","createContext$1","f","Provider","Consumer","useContextSelector","selector","useContext$1","process","env","NODE_ENV","Error","version","selected","state","dispatch","useReducer","prev","Object","is","nextSelected","add","delete","useContext","useContextUpdate","BridgeProvider","useBridgeValue","bridgeValue"],"sources":["D:\\WebNodeJs\\node18\\trelo_project\\front_end\\node_modules\\react-spreadsheet\\node_modules\\use-context-selector\\src\\index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  MutableRefObject,\n  Provider,\n  ReactNode,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => {\n    try {\n      runWithPriority(NormalPriority, thunk);\n    } catch (e: any) {\n      if (e.message === 'Not implemented.') {\n        thunk();\n      } else {\n        throw e;\n      }\n    }\n  } : (thunk: () => void) => thunk();\n\ntype Version = number;\ntype Listener<Value> = (\n  action: { n: Version, p?: Promise<Value>, v?: Value }\n) => void\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<Listener<Value>>;\n    /* \"u\"pdate    */ u: (thunk: () => void, options?: { suspense: boolean }) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value; children: ReactNode }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n) => {\n  const ContextProvider = ({ value, children }: { value: Value; children: ReactNode }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const [resolve, setResolve] = useState<((v: Value) => void) | null>(null);\n    if (resolve) {\n      resolve(value);\n      setResolve(null);\n    }\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<Listener<Value>>();\n      const update = (thunk: () => void, options?: { suspense: boolean }) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          const action: Parameters<Listener<Value>>[0] = {\n            n: versionRef.current,\n          };\n          if (options?.suspense) {\n            action.n *= -1; // this is intentional to make it temporary version\n            action.p = new Promise<Value>((r) => {\n              setResolve(() => (v: Value) => {\n                action.v = v;\n                delete action.p;\n                r(v);\n              });\n            });\n          }\n          listeners.forEach((listener) => listener(action));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener({ n: versionRef.current, v: value });\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n  return ContextProvider;\n};\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    action?: Parameters<Listener<Value>>[0],\n  ) => {\n    if (!action) {\n      // case for `dispatch()` below\n      return [value, selected] as const;\n    }\n    if ('p' in action) {\n      throw action.p;\n    }\n    if (action.n === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if ('v' in action) {\n        if (Object.is(prev[0], action.v)) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(action.v);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [action.v, nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * concurrent rendering in React 18.\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n *\n * // Wrap set state function\n * update(() => setState(...));\n *\n * // Experimental suspense mode\n * update(() => setState(...), { suspense: true });\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider = ({ context, value, children }:{\n  context: Context<any>;\n  value: any;\n  children: ReactNode;\n}) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}