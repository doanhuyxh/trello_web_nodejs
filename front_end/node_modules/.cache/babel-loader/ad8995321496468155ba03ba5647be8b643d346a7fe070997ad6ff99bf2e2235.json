{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/**\n * Convert row label to index.\n *\n * @param {String} label Row label (eq. '1', '5')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\n */\nexport function rowLabelToIndex(label) {\n  var result = parseInt(label, 10);\n  if (isNaN(result)) {\n    result = -1;\n  } else {\n    result = Math.max(result - 1, -1);\n  }\n  return result;\n}\n/**\n * Convert row index to label.\n *\n * @param {Number} row Row index.\n * @returns {String} Returns row label (eq. '1', '7').\n */\n\nexport function rowIndexToLabel(row) {\n  var result = '';\n  if (row >= 0) {\n    result = \"\".concat(row + 1);\n  }\n  return result;\n}\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Convert column label to index.\n *\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\n */\n\nexport function columnLabelToIndex(label) {\n  var result = 0;\n  if (typeof label === 'string') {\n    label = label.toUpperCase();\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  --result;\n  return result;\n}\n/**\n * Convert column index to label.\n *\n * @param {Number} column Column index.\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\n */\n\nexport function columnIndexToLabel(column) {\n  var result = '';\n  while (column >= 0) {\n    result = String.fromCharCode(column % COLUMN_LABEL_BASE_LENGTH + 97) + result;\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\n  }\n  return result.toUpperCase();\n}\nvar LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\n/**\n * Extract cell coordinates.\n *\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\n * @returns {Array} Returns an array of objects.\n */\n\nexport function extractLabel(label) {\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\n    return [];\n  }\n  var _label$toUpperCase$ma = label.toUpperCase().match(LABEL_EXTRACT_REGEXP),\n    _label$toUpperCase$ma2 = _slicedToArray(_label$toUpperCase$ma, 5),\n    columnAbs = _label$toUpperCase$ma2[1],\n    column = _label$toUpperCase$ma2[2],\n    rowAbs = _label$toUpperCase$ma2[3],\n    row = _label$toUpperCase$ma2[4];\n  return [{\n    index: rowLabelToIndex(row),\n    label: row,\n    isAbsolute: rowAbs === '$'\n  }, {\n    index: columnLabelToIndex(column),\n    label: column,\n    isAbsolute: columnAbs === '$'\n  }];\n}\n/**\n * Convert row and column indexes into cell label.\n *\n * @param {Object} row Object with `index` and `isAbsolute` properties.\n * @param {Object} column Object with `index` and `isAbsolute` properties.\n * @returns {String} Returns cell label.\n */\n\nexport function toLabel(row, column) {\n  var rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\n  var columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\n  return columnLabel + rowLabel;\n}","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","rowLabelToIndex","label","result","parseInt","isNaN","Math","max","rowIndexToLabel","row","concat","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","columnLabelToIndex","toUpperCase","j","pow","indexOf","columnIndexToLabel","column","String","fromCharCode","floor","LABEL_EXTRACT_REGEXP","extractLabel","_label$toUpperCase$ma","match","_label$toUpperCase$ma2","columnAbs","rowAbs","index","isAbsolute","toLabel","rowLabel","columnLabel"],"sources":["D:/WebNodeJs/node18/trelo_project/front_end/node_modules/hot-formula-parser/helper/cell.mjs"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Convert row label to index.\n *\n * @param {String} label Row label (eq. '1', '5')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\n */\nexport function rowLabelToIndex(label) {\n  var result = parseInt(label, 10);\n\n  if (isNaN(result)) {\n    result = -1;\n  } else {\n    result = Math.max(result - 1, -1);\n  }\n\n  return result;\n}\n/**\n * Convert row index to label.\n *\n * @param {Number} row Row index.\n * @returns {String} Returns row label (eq. '1', '7').\n */\n\nexport function rowIndexToLabel(row) {\n  var result = '';\n\n  if (row >= 0) {\n    result = \"\".concat(row + 1);\n  }\n\n  return result;\n}\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Convert column label to index.\n *\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\n */\n\nexport function columnLabelToIndex(label) {\n  var result = 0;\n\n  if (typeof label === 'string') {\n    label = label.toUpperCase();\n\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n\n  --result;\n  return result;\n}\n/**\n * Convert column index to label.\n *\n * @param {Number} column Column index.\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\n */\n\nexport function columnIndexToLabel(column) {\n  var result = '';\n\n  while (column >= 0) {\n    result = String.fromCharCode(column % COLUMN_LABEL_BASE_LENGTH + 97) + result;\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\n  }\n\n  return result.toUpperCase();\n}\nvar LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\n/**\n * Extract cell coordinates.\n *\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\n * @returns {Array} Returns an array of objects.\n */\n\nexport function extractLabel(label) {\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\n    return [];\n  }\n\n  var _label$toUpperCase$ma = label.toUpperCase().match(LABEL_EXTRACT_REGEXP),\n      _label$toUpperCase$ma2 = _slicedToArray(_label$toUpperCase$ma, 5),\n      columnAbs = _label$toUpperCase$ma2[1],\n      column = _label$toUpperCase$ma2[2],\n      rowAbs = _label$toUpperCase$ma2[3],\n      row = _label$toUpperCase$ma2[4];\n\n  return [{\n    index: rowLabelToIndex(row),\n    label: row,\n    isAbsolute: rowAbs === '$'\n  }, {\n    index: columnLabelToIndex(column),\n    label: column,\n    isAbsolute: columnAbs === '$'\n  }];\n}\n/**\n * Convert row and column indexes into cell label.\n *\n * @param {Object} row Object with `index` and `isAbsolute` properties.\n * @param {Object} column Object with `index` and `isAbsolute` properties.\n * @returns {String} Returns cell label.\n */\n\nexport function toLabel(row, column) {\n  var rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\n  var columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\n  return columnLabel + rowLabel;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}